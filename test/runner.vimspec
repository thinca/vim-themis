Describe Runner
  Before
    let runner = themis#runner#new()
  End

  Describe events
    Before
      let listener = {'called': []}
      function! listener._(name, args) abort
        let self.called += [a:name]
      endfunction
      call runner.add_event(listener)
    End

    Context with no test
      Before
        let bundle = themis#bundle#new('test')
      End

      It is emitted in order
        call runner.run(bundle, themis#option#default())
        Assert Equals(listener.called, [
        \   'init',
        \     'start',
        \     'end',
        \   'finish',
        \ ])
      End
    End

    Context with some tests
      Before
        let bundle = themis#bundle#new('test')
        let bundle.style = runner._styles['basic']
        function! bundle.suite.success_test() abort
        endfunction
        function! bundle.suite.failure_test() abort
          Fail fail test
        endfunction
        function! bundle.suite.pending_test() abort
          Skip pending
        endfunction
      End

      It is emitted in order
        call runner.run(bundle, themis#option#default())
        Assert Equals(listener.called, [
        \   'init',
        \     'start',
        \       'before_suite',
        \         'start_test',
        \           'before_test',
        \           'after_test',
        \         'end_test',
        \         'pass',
        \         'start_test',
        \           'before_test',
        \           'after_test',
        \         'end_test',
        \         'fail',
        \         'start_test',
        \           'before_test',
        \           'after_test',
        \         'end_test',
        \         'pending',
        \       'after_suite',
        \     'end',
        \   'finish',
        \ ])
      End
    End
  End

  Describe randomization
    Before
      function s:dummy_test() abort
      endfunction
      function s:gen_bundle(runner) abort
        let listener = {}
        function! listener._(name, args) abort
          if a:name ==# 'after_suite'
            let self.entries = a:args[0].test_entries
          endif
        endfunction
        call a:runner.add_event(listener)

        let bundle = themis#bundle#new('test')
        let bundle.style = a:runner._styles['basic']
        for i in range(20)
          let bundle.suite['test_' . i] = function('s:dummy_test')
        endfor
        return [listener, bundle]
      endfunction
    End

    After
      delfunction s:dummy_test
      delfunction s:gen_bundle
    End

    It runs test suites in randomized order
      let [listener, bundle] = s:gen_bundle(runner)
      let opts = themis#option#default()
      let opts.random = 1
      call runner.run(bundle, opts)
      Assert NotEquals(listener.entries, map(range(20), '"test_" . v:val'))
    End

    It runs test suites in specific order with given random seed
      let opts = themis#option#default()
      let opts.random = 1
      let opts.random_seed = 0x114514

      let [listener, bundle] = s:gen_bundle(runner)
      call runner.run(bundle, opts)
      let entries1 = listener.entries

      let [listener, bundle] = s:gen_bundle(runner)
      call runner.run(bundle, opts)
      let entries2 = listener.entries

      Assert Equals(entries1, entries2)
    End
  End
End
